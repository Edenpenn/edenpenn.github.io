{"title":"HTML与CSS》第六章到第十章总结","slug":"HTML与CSS》第六章到第十章总结","date":"2019-04-09T03:35:28.000Z","updated":"2019-04-09T03:40:13.471Z","comments":true,"path":"api/articles/HTML与CSS》第六章到第十章总结.json","photos":[],"link":"","excerpt":"《Head first  HTML与CSS》第六章到第十章总结","covers":null,"content":"<blockquote>\n<p>《Head first  HTML与CSS》第六章到第十章总结</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>第六章到第十章的标题分别是：<br>6、标准及其他——严肃的HTML<br>7、CSS入门——加一点样式<br>8、增加字体和颜色样式——扩大词汇量<br>9、盒模型——与元素亲密接触<br>10、div与span——高级web建设<br>  第六章主要是认识HTML的国际标准，而第七到第十章都是需要重点加深的，因为HTML的样式主要是靠CSS来为页面增加样式。</p>\n<p><strong>标准及其他——严肃的HTML</strong><br>到目前为止，HTML一共有5个版本，分别是：HTML1.0~HTML2.0、HTML3、HTML4、HTML4.01、XHTML1.0以及最新的HTML5。定义HTML标准的组织被称为万维网协会（World Wide Web Consortium W3C），通过最上方的doctype（文档类型定义）来告诉浏览器这个页面使用的HTML标准，HTML5只有短短的一行:<code>&lt;!doctype html&gt;</code>，十分简单，在此之前的HTML标准都相当复杂，版本号与丑陋的语法混杂在一起；随着HTML5的到来，doctype得到了简化，HTML也成为了一个活的标准，这个标准会不断改变，加入新的特性和更新，所以现在要做的就是告诉浏览器在使用“HTML”，不用再担心特定的版本号或语言，也不用指向某个标准。HTML除了能够建立Web静态页面之外，还能建立成熟的Web应用来交互，完成具体的工作。<br>一个完全合法的HTML是必须要有doctype的，通过<a href=\"http://validator.w3.org\" target=\"_blank\" rel=\"noopener\">W3C的验证工具</a>可以验证你写的HTML是否合法。<br>字符编码可以在计算机上表示某种语言中的所有字母、数字和其他符号，例如ASCⅡ，甚至莫尔斯码，还有很多其他的编码。如今标准统一为Unicode字符编码；采用Unicode，一种编码就可以表示所有语言。不过，由于还存在其他编码，所以我们还需要告诉浏览器我们在使用Unicode（或者你选择的另外一种编码）。要为Web页面指定Unicode，需要在HTML中加一个告诉浏览器Web页面额外信息的<code>&lt;meta&gt;</code>标记，<code>&lt;meta&gt;</code>的charset属性告诉浏览器Web页面使用的字符编码。<br>大多数Web页面的HTML文件都使用utf-8编码，“utf-8”的u表示Unicode字符集，很多常用软件应用和操作系统都支持Unicode，这也是Web选择的编码，因为它支持所有语言和多语种文档（即多种语言文档），它还与ASCⅡ兼容；因此charset属性通常也是utf-8，为服务器提供的文件的编码要与<code>&lt;meta&gt;</code>标记中的编码一致。<br>插入图像时一定要添加alt和title属性，如果图像出于某种原因无法显示（比如说服务器宕机、连接过慢），alt属性会帮你显示所指定的alt文本来取代图像，其次对于有视力障碍的用户，他们会使用一个屏幕阅读器来阅读页面，屏幕阅读器可以为用户读出alt文本； title属性的效果是当光标移到元素上时会显示一个工具提示文本，通过这两个属性能帮助用户更好的理解页面以及元素的内容。</p>\n<p>编些合法的HTML页面一定要记住以下这些常识性的原则：<br>1、    一定要以<code>&lt;doctype&gt;</code>开头。<br>每个页面都要从一个doctype开始。这样才能让浏览器和验证工具顺利开展工作。任何时候都要使用<code>&lt;!doctype html&gt;</code>，除非你确实在写HTML4.01或XHTML。<br>2、<code>&lt;html&gt;</code>元素：不能没有它。<br>紧接着doctype，<code>&lt;html&gt;</code>元素必须是Web页面的最顶层元素或根元素。所以，在doctype后面，由<code>&lt;html&gt;</code>标记开始你的页面，<code>&lt;/html&gt;</code>标记结束页面，页面中的所有其他内容都嵌套在这个元素中。<br>3、记住，要使用<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>编些更好的HTML。<br>   只有<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>元素能直接放在<code>&lt;html&gt;</code>元素中。这说明，所有其他元素都必须放在<code>&lt;head&gt;</code>或<code>&lt;body&gt;</code>元素中。没有例外。<br>4、在<code>&lt;head&gt;</code>中指定正确的字符编码。<br>   在<code>&lt;head&gt;</code>中包含一个<code>&lt;meta charset=”utf-8”&gt;</code>标记。浏览器会感谢你的，用户在你的博客上阅读世界各地用户发表的评论时，也会因为你指定了正确的字符编码而感谢你。<br>5、没有<code>&lt;title&gt;</code>和<code>&lt;head&gt;</code>算什么？<br>   一定要在<code>&lt;head&gt;</code>元素中包含一个<code>&lt;title&gt;</code>元素。这是雷打不动的原则。如果没有做到，则会得到不符合标准的HTML。只能在<code>&lt;head&gt;</code>元素中放置<code>&lt;title&gt;</code>、<code>&lt;meta&gt;</code>和<code>&lt;style&gt;</code>元素。<br>6、嵌套某些元素时要当心。<br>在这里提供的原则中，嵌套规则相当灵活。不过有一些情况是没有意义的。不要把‘<code>&lt;a&gt;</code>’元素嵌在另一个’<code>&lt;a&gt;</code>’元素中，因为这样会让访问者很迷惑。另外，不允许在’<code>&lt;img&gt;</code>’等void元素中嵌套其他内联元素。<br>7、检察属性！<br>有些元素属性是必要的，有些则是可选的。例如，如果<code>&lt;img&gt;</code>没有src属性就没有什么意义，现在你还知道了，alt属性也是必要的。在学习过程中，要逐渐熟悉各个元素的必要和可选属性。</p>\n<p>如果遵循标准，则你的页面会更快地显示，而且在不同浏览器中显示时差异会更小，CSS也能更好地工作。</p>\n<p><strong>CSS入门——加一点样式</strong><br>在第一章的时候已经学过，Web页面通过HTML来建立主体结构，而要在Web页面上增加自己的样式化规则，确定字体、颜色大小和页面的很多其他特征就需要CSS。<br>通常为HTML页面添加CSS样式的方法有2种，第一种是直接在页面<code>&lt;head&gt;</code>首部元素中插入<code>&lt;style&gt;</code>元素来实现，这是也最容易的办法，在第一章已经提过；另一种就是通过在<code>&lt;title&gt;</code>标题元素下插入<code>&lt;link&gt;</code>标签引入外部样式表，这需要创建一个新的CSS文件，两种方式都需要通过type属性来定义CSS格式。<br>CSS包含一些简单的语句，被称为规则。每个规则为选择的一些HTML元素提供样式，典型的规则包括一个选择器，以及一个或多个属性和值。选择器指定规则将应用到哪些元素，每个属性声明以一个分号结束，规则中的所有属性和值都放在{}大括号之间，也可以使用元素名作为选择器，来任意选择元素。如：<br><code>p {background-color:red;}</code><br>在这个CSS规则中，P元素作为选择器会选中页面中包含的所有P元素，接着就可以在大括号中定义选中的P元素的CSS样式规则，CSS允许指定各种选择器来确定将样式应用到哪些元素；很多属性都可以继承，例如，如果为<code>&lt;body&gt;</code>元素设置了一个可继承的属性，那么<code>&lt;body&gt;</code>的所有子元素都会继承这个属性。通过为你想改变的元素创建一个更特定的规则，能覆盖该元素继承的属性，如果对<code>&lt;body&gt;</code>有一个规则，对<code>&lt;em&gt;</code>元素有一个更特定的规则，它就会使用这个更特定的规则。<br>与HTML    文档一样，CSS同样可以添加注释；CSS的注释需要被包围在<code>/*</code>和<code>*/</code>之间，例如：<br><code>/*这个规则没有任何效果，因为它在一个注释里*/</code><br>注释可以跨多行，可以用来包围CSS，但浏览器会将被包围的CSS忽略，没有任何效果。<br>可以使用class属性将元素增加到一个类，跟ID一样，类也可以作为选择器，在CSS文件中使用“<code>.classname（类名）</code>”可以选择这个类的所有元素并创建样式规则，例如：<br><code>.greentea{color:green;}</code><br>选择器“.”会选择greentea类中的所有段落将它们的文本变成绿色。<br>一个元素可以加入多个类，只需要将要增加的类名放在class属性之中即可，各个类名之间用一个空格分隔，类名的顺序并不重要。如：<br><code>&lt;p class=”greentea raspberry blueberry”&gt;</code><br>常用的CSS属性有以下这些：<br><code>color</code>：设置文本元素的字体颜色。<br><code>top</code>：控制元素顶部的位置。<br><code>text-align</code>：将文本左对齐、居中或右对齐。<br><code>letter-spacing</code>：在字母之间设置间距。<br><code>background-color</code>：控制元素的背景颜色。<br><code>font-weight</code>：控制文本的粗细，可以用它设置粗体。<br><code>border</code>：这个属性在一个元素周围加边框，可以有一个实线边框、凸起边框、虚线边框……<br><code>font-style</code>：设置斜体文本。<br><code>left</code>：指定一个元素的左边所在位置。<br><code>padding</code>：内边距；如果在一个元素边缘和它的内容之间需要有空间就可以使用这个属性。<br><code>list-style</code>：允许你改变列表中的列表项的外观。<br><code>line-height</code>：设置文本元素中的行间距。<br><code>font-size</code>：设置文本大小。<br><code>background-image</code>：设置背景图像。<br><code>font-family</code>：规定元素的字体系列。<br>除了以上这些，CSS还有很多其他的样式属性。<br>与HTML一样CSS可以通过<a href=\"http://jigsaw.w3.org/css-validdator\" target=\"_blank\" rel=\"noopener\">W3C验证工具</a>来验证CSS文件的合法性。<br><strong>增加字体和颜色样式——扩大你的词汇量</strong><br> 有很多CSS专门用来设置文本样式，通过这些CSS可以控制文本的字体、风格和颜色，甚至可以控制文本上加的装饰。<br> 首先用<code>font-family</code>属性指定页面中各个元素使用的字体，如：<br> <code>body{</code><br>    <code>font-family:Verdana,Geneva,Arial,sans-serif;</code><br><code>}</code><br>每个<code>font-family</code>包含一组有共同特征的字体。共有5个字体系列：sans-serif、serif、monospace、cursive和fantasy，每个字体系列都包括大量字体，它们都有各自的特征；sans-serif字体系列包括没有衬线的字体。与serif字体相比，通常认为sans-serif字体在计算机屏幕上更容易识读，sab-serif也是“没有衬线”的意思。Serif字体系列则是有衬线的字体系列，很多人一看到这种字体就想到新闻报纸的文字排版。monospace字体系列中的字体包含固定宽度的字符；例如，一个“i”在水平方向所占的宽度与一个“m”所占的宽度是相同的，这些字体主要用于显示软件代码示例。cursive字体系列包括看似手写的字体，有时会看到标题中使用这些字体。Fantasy字体系列包含有某种风格的装饰性字体。<br>serif字体看起来很高雅、很传统，而sans-serif字体外观很清晰，可读性好。monospace字体就好像是打字机打出来的。Cursive和fantasy给人一种有趣或者很有风格的感觉。<br>除此之外，还可以通过CSS中的“<code>@font-face</code>”规则为页面增加Web字体，如：<br><code>@font-face{</code><br>  <code>font-family:”Emblema One”;</code><br>  <code>src: url(“http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woff”)</code><br>     <code>url(“http://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf”)</code><br><code>}</code><br>与正常的规则不同，正常规则会选择一组元素并指定样式，而<code>@font-face</code>规则会建立一个字体，将指定一个<code>font-family</code>名，以便以后使用。在<code>@font-face</code>规则中，我们使用<code>font-family</code>属性为这个字体创建一个名字，可以使用你喜欢的任何名字，不过通常最好与字体名一致，如：“Emblena one”。src属性告诉浏览器在哪里可以得到这个字体，对于浏览器可识别的每个文件都要分别指定一个src值，在这里指定了现代浏览器可以识别的.woff和.ttf两种格式的字体，除了这两种字体以外还有另外常用的三种字体格式：otf、eot、svg。otf是与ttf紧密相关的一种格式，建立在TrueType基础之上。eot是opentype的一种压缩形式，这种格式是微软专用的，仅IE提供支持。svg是一种通用图像格式，svg字体使用这种格式表示字符。<br>一旦用<code>@font-face</code>规则在浏览器中加载一个字体，接下来就可以在CSS中用font-family属性引用你指定的字体名。<br>因为大多数计算机上通常只安装了部分字体，所以在指定字体时一定要尽量多的指定候选字体，以防用户没有安装你的首选字体。每个字体之间用括号分隔，最后用分号结束。而最后一个字体一定要指定为一个通用字体，如serif或sans-serif，这样一来，如果找不到其他字体，浏览器也可以替换适当的字体。<br>接着通过<code>font-size</code>指定字体大小，如：<br><code>body{</code><br>  <code>font-size:14px;</code><br><code>}</code><br>除了用像素作为单位制定字体大小之外，也可以用百分比作为单位；跟像素会明确指出字体具体有多大不同，用一个百分数指定字体大小时，会相对于父元素的字体大小来指出这个字体的大小。如：<br><code>body{</code><br> <code>font-size:14px;</code><br><code>}</code><br><code>h1{</code><br><code>font-size:150%;</code><br><code>}</code><br>这里就表示了<code>h1</code>元素的字体大小是父元素<code>body</code>字体的150%大。<br>还可以用em指定字体大小，类似于百分数，这也是一个相对度量单位。使用em时，不是指定一个百分数，而是要指定一个比例因子。如：<br><code>body{</code><br><code>font-size:14px;</code><br><code>}</code><br><code>h2{</code><br><code>font-size:1.2em;</code><br><code>}</code><br>这里指定了”<code>&lt;h2&gt;</code>“标题的大小将是父元素字体大小的1.2倍，在这里就是1.2乘以14PX，大约17PX。<br>最后一种指定字体大小的方法：关键字。可以把一个字体大小指定为xx-small，x-small，small，medium，large，x-large或xx-large，浏览器会把这些关键字转换为像素值，它会使用浏览器中定义的默认值来完成这个转换。如：<br><code>body{</code><br><code>font-size:small;</code><br><code>}</code><br>Small通常定义为大约12像素，每个大小大约比前一个大小大20%。<br>然后通过<code>font-weight</code>属性控制文本的粗细。粗体文本看起来比正常文本更深，而且往往要“胖”一点。可以将元素的<code>font-weight</code>属性设置为bold来使用粗体文本。如：<br><code>font-weight:bold;</code><br>也可以反过来。如果一个元素默认地设置为bold，或者从父元素继承了粗体，也可以设置为normal去掉粗体样式：<br><code>font-weight:normal;</code><br>还有两个相对font-weight属性：bolder和lighter。使用这两个属性值时，会相对于所继承的值使文本样式稍粗一些或者稍细一些。这些值很少使用，因为没有多少字体支持粗细程度的微小差别，实际上这两个值通常没有任何效果。还可以把<code>font-weight</code>属性设置为100到900之间的一个数（100的倍数），不过同样的，这个特性也未得到字体和浏览器的广泛支持，所以通常并不使用。<br>定义完字体粗细之后可以在CSS中通过<code>font-style</code>为字体增加斜体风格。如：<br><code>font-style:italic;</code><br>不过，并不是所有字体都支持斜体italic风格，所以得到的实际上称为oblique倾斜文本。倾斜文本也是倾斜的，不过这种字体并不是使用一组专门设计的倾斜字符，而是由浏览器将正常文字倾斜，同样也可以使用<code>font-style</code>属性得到倾斜文本。如：<br><code>font-style:oblique;</code><br>有时这两种风格看起来是一样的，有时则不同。所以除非确实非得区分斜体和倾斜文本，否则完全可以任选一种使用。如果确实很重要，就需要对不同的字体和浏览器组合进行测试，来得到最佳效果。<br>接着，使用<code>color</code>属性为文本添加颜色，一般可以直接用颜色名添加颜色，如：<br><code>h1{</code><br><code>color:red;</code><br><code>}</code><br>但CSS只定义了大约150个·颜色名，除此之外，还能通过rgb值来指定颜色，这个值是指红、绿、蓝三种颜色所占的百分比。如：<br><code>body{</code><br><code>color:rgb(80%,40%,0%);</code><br><code>}</code><br>又或者将这三种颜色指定为0到255之间的一个数值，如：<br><code>body{</code><br><code>color:rgb(204,102,0);</code><br><code>}</code><br>最后一种是使用最广泛的，用十六进制码来指定颜色。如：<br><code>body{</code><br><code>color:#cc6600</code><br><code>}</code><br>在十六进制码中，每组两位数字表示一个从0到255的数，但两位数字就只能表示到99，计算机科学家们不想被简单的0~9束缚，于是借助一些字母（A~F）来表示所有256个数值。<br>最后，我们通过<code>text-decoration</code>来为文本添加下划线或者删除线之类的“装饰“，如：<br><code>em{</code><br><code>text-decoration:underline;</code><br><code>}</code><br>这是为文本添加下划线的方法，也可以一次性为文本设置多个装饰，像是同时添加下划线和上划线，如：<br><code>em}</code><br><code>text-decoration:underline overline;</code><br><code>}</code><br>如果文本继承了你不想要的文本装饰，可以使用值“none“来去除装饰。</p>\n<p><strong>盒模型——与元素的亲密接触</strong><br>   在正式认识“盒模型“的概念之前，先学会一个新的属性<code>line-height</code>，这个属性是用来调整整个页面上文本的行高的，使得各行之间有更大的垂直间距，改善可读性，这样做还可以使页面不同部分之间形成对比，产生反差。如：<br><code>body{</code><br><code>line-height:1.6em;</code><br><code>}</code><br><code>line-height</code>属性可以继承，所以通过在body规则中设置，页面上的所有元素现在都有了新的行高（1.6em）。<br>盒模型（box model）是CSS看待元素的一种方式，CSS将每个元素看作由一个盒子表示，每个盒子由一个内容区以及可选的内边距、边框和外边距组成。内容区（content area）包含内容（例如文本或图像）。内容区被可选的透明内边距（padding）包围。内边距周围可能放置一个可选的边框（border）。最后，有一个可选的透明外边距（margin）包围所有部分。<br>所有元素都被当作盒子：段落、标题、块引用、列表、列表项等。甚至内联元素（如<code>&lt;em&gt;</code>和链接）在CSS看来也是盒子。<br>每个元素都会有一些内容，如文本或图像，这个内容会放在一个盒子里，这个盒子的大小正好能包含住所有内容，在内容区中，内容与盒子边缘之间没有空间。<br>所有盒子在内容区周围可能有一层内边距。内边距是可选的，所以不一定有，不过通过使用内边距，可以在内容与盒子边框之间创建一些看得到的空间。内边距是透明的，没有颜色，也没有自己的装饰。通过使用CSS，可以控制整个内容区周围内边距的宽度，甚至可以控制任意一边（上、右、下或左）的内边距宽度。<br>元素周围可以有一个可选的边框。这个边框会包围内边距，另外，因为它是围绕内容的一条线，这就从视觉上使内容与同一页面的其他元素隔开。边框可以有不同的宽度、颜色和样式。通过使用CSS，可以控制边框的宽度、颜色和样式。<br>外边距也是可选的，包围着边框。利用外边距，可以在同一页面上的不同元素之间增加空间。如果两个盒子紧挨着，外边距就相当于他们之间的空间。类似于内边距，外边距也是透明的，本身没有颜色或装饰。<br>通过CSS可以指定盒子的样式，包括内边距，边框和外边距，或者只有内边距和一个边框，或者只有边框，或者有外边距，但没有边框和内边距。<br>利用CSS，可以控制内容区任意一边的内边距，不管是左右内边距还是上下内边距<br>对外边距也可以有同样的控制，同时与内边距一样，可以独立地指定四边的外边距。<br>对于外边距、内边距或边框，CSS提供了相应的属性，可以一次性对所有四个边(上、右、下、左)完成设置，也可以单独设置任意一边。<br>甚至可以采用多种方法控制内容区的宽度和高度。<br>除了使用<code>background-color</code>指定元素的背景颜色，还可以通过<code>background-image</code>属性在元素的背景上放置图像，如：<br><code>.guarantee</code><br><code>{</code><br><code>background-image:url(images/background.jpg);</code><br><code>}</code><br><code>background-image</code>属性设置为一个URL，这可以是一个相对路径，也可以是一个完整的URL（http://…）。<br>元素的背景会在内容和内边距下显示，但不会延伸到外边距下面。通过<code>background-position</code>和<code>background-repeat</code>属性可以设置背景图像的位置和平铺行为。如：<br><code>.guarantee{</code><br><code>background-image:url(images/background.jpg);</code><br><code>background-repeat:no-repeat;</code><br><code>background-position:top left;</code><br><code>}</code><br><code>no-repeat</code>这个值是指图像显示一次，根本不重复，<code>top left</code>是指希望它在左上角。<br><code>background-position</code>可以按像素指定，也可以指定为一个百分数，或者还可以使用关键字指定，如：top、left、right、bottom和center。默认地，背景图像会平铺，也就是<code>background-repeat</code>的默认值是<code>repeat</code>，除了重复和不重复之外，还有图像只在水平方向上重复<code>repeat-x</code>，在垂直方向上重复<code>repeat-y</code>以及按父元素的设置来处理<code>inherit</code>。<br>如果只需要在一边增加边距的话一定要注意顺序，一定要先设置好四周的边距再设置一边的边距。如：<br><code>,gurantee{</code><br><code>padding:25px;</code><br><code>padding-left:80px;</code><br><code>}</code><br>这里首先将四周的内边距设置为25像素，然后再为左边指定一个<code>padding-left</code>来指定左边的内边距，如果交换了顺序，就会先设置左边的内边距，然后才将四周的通用<code>padding</code>设置回25像素，这样一来，左边的内边距就被覆盖了，外边距也同理。<br>  边框样式由<code>border-style</code>指定。除了最常用的<code>solid</code>实线和<code>dotted</code>虚线之外还有6种边框样式，分别是<code>double</code>双线样式、<code>dashed</code>破折线样式（就是围绕边框的一组破折线）、<code>groove</code>槽线样式（这会让被其包裹的元素看起来就像页面中的一个槽）、<code>inset</code>内凹样式（这让被包裹的元素看起来向页面凹进去）、<code>outset</code>外凸样式（这让被包裹的元素看起来像是从页面凸出来一样）、<code>ridge</code>脊线样式（这让被包裹的元素看起来像是从页面上一个凸起的山脊。）如：<br><code>.blacktea{</code><br><code>border-style:groove;</code><br><code>}</code><br>  边框宽度由<code>border-width</code>属性控制，可以使用像素或关键字thin、medium或thice来指定边框宽度，不过，不同浏览器对thin、medium和thick的具体大小可能有不同定义，所以如果边框大小对你来说确实很重要，就应该考虑使用像素大小来指定。<br>边框颜色由<code>border-color</code>属性设置，这与设置字体颜色类似，可以使用颜色名、rgb值或十六进制码来指定颜色。就像外边距和内边距一样，还可以指定任意一边（上、右下和左）的边框样式、宽度和颜色。如：<br><code>.blacktea{</code><br><code>border-top-color:black;</code><br><code>border-top-style:dashed;</code><br><code>border-top-width:thick</code><br><code>}</code><br>  可以使用<code>border-redius</code>属性为边框创建圆角，可以在四个角上都创建圆角，或者只对一个角或4个角的任意组合创建圆角；可以使用px或em来指定半径大小，如果使用em，边框半径的度量相对于元素的字体大小与使用em指定<code>font-size</code>时是一样的。通过使用<code>border-radius</code>可以得到各种有趣的形状。<br>HTML可以使用多个样式表，只需要在<code>&lt;head&gt;</code>头部元素中通过添加<code>&lt;link&gt;</code>元素再引入另外的样式表即可，如果两个样式表包含冲突的属性定义，HTML文件中最后链接的样式表最为优先。<br>如果想要针对将要显示页面的设备类型（桌面PC、笔记本电脑、平板电脑、手机或者甚至页面的印刷版本）来调整页面的样式，可以通过在<code>&lt;link&gt;</code>元素中增加<code>media</code>属性来指定设备，如：<br><code>&lt;link href=”lounge-mobile.css” rel=”stylesheet” media=”screen and (max-device-width:480px)“&gt;</code><br>media属性允许你指定应用这个样式表的设定类型。通过创建一个“媒体查询“来指定设备类型，媒体查询要与设备匹配。以上这个查询指定了有屏幕的设备（而不是其他设备，比如说打印机或3D眼镜或者盲文阅读机），而且屏幕宽度不超过480像素。同样也可以创建一个查询来匹配打印机设备，如：<br><code>&lt;link href=”lounge-mobile.css” rel=”stylesheet” media=”print“&gt;</code><br>这个查询指定了媒体类型为“print“时才会使用，这说明要通过打印机查看页面。<br>查询中还有很多属性可以使用，如min-debice-width、max-device-width（刚刚用过），以及显示方向<code>[orientation，这可以是横向（landspace）或纵向（portrait）]</code>。要记住，可以根据需要为HTML增加多个<code>&lt;link&gt;</code>标记，涵盖你要支持的所有设备。<br>也可以直接在CSS中增加媒体查询，使用<code>@media</code>规则，如：<br><code>@media screen and (min-device-width:481px){</code><br><code>#gurantee{</code><br><code>margin-right:250px;</code><br><code>}</code><br><code>}</code><br>对于与这个查询匹配的设备，将所有适用规则放在大括号里。所以，如果屏幕宽度小于481px就会使用这条规则。<br>采用这种方法，<code>@media</code>规则中只包含特定于一种媒体类型的CSS规则。在CSS文件中，要把对所有媒体类型都通用的规则放在<code>@media</code>规则下面，这样一来，就不会不必要地重复规则了。另外，浏览器加载界面时，它会通过媒体类型来确定页面适用的规则，而将不匹配的规则忽略，不过IE8及以前版本不支持媒体查询。<br>媒体查询是目前标准组织在积极发展的一个领域，所以要密切关注指定设备的最佳实践，这方面还在不断演进发展。</p>\n<p><strong>div与span——高级web建设</strong><br>  在第三章时说过，在开始输入内容之前要规划好web页面的结构，创建HTML的基本构建模块，通过<code>&lt;div&gt;</code>与<code>&lt;span&gt;</code>就能够将这些基本构建模块归组在一起，让页面的结构更加清晰以及方便增加样式。<br>  首先要规划好页面上的逻辑区，逻辑区就是彼此相关的一组元素，规划好之后就将这些元素嵌入<code>&lt;div&gt;</code>的开始与结束标记之间，接着使用一个id属性为<code>&lt;div&gt;</code>提供一个唯一的标签。如：<br>  <code>&lt;div id=”cats”&gt;</code><br>  <code>&lt;h1&gt;cats&lt;/h1&gt;</code><br>  <code>&lt;p&gt;cats&lt;/p&gt;</code><br><code>&lt;/div&gt;</code><br>一旦用<code>&lt;div&gt;</code>元素将内容区归组在一起，类似于其他块元素，就可以对这些<code>&lt;div&gt;</code>增加样式。例如，对于包含在<code>&lt;div&gt;</code>中的一组元素，可以使用嵌入这些元素的<code>&lt;div&gt;</code>边框属性，对这组元素增加一个边框：<br><code>#cats{</code><br><code>border-color:pink;</code><br><code>border-style:solid;</code><br><code>border-width:thin;</code><br><code>}</code><br>也可以通过width属性设置元素内容区的宽度，如：<br><code>cats{</code><br><code>width:200px;</code><br><code>}</code><br>注意，width属性只指定内容区的宽度。要确定整个盒子的宽度，需要将内容区的宽度加上左和右内边距，左和右外边距以及边框的宽度，边框宽度要加两次，因为左边和右边都有边框。<br>一个块元素的默认宽度是“auto”，这说明它会延伸占满可用的空间，所以设置好一个元素的宽度，它就不会延伸来占满浏览器窗口的整个宽度。<br>通过<code>text-align</code>属性能将块元素中的所有内容对齐，可以居中(center)，左对齐(left)或右对齐（right）。<br>如果想针对<code>&lt;div&gt;</code>元素中的某个子元素指定样式，就可以使用子孙选择器来选择嵌套在其他元素中的元素，例如，可以选择为所有<code>&lt;div&gt;</code>元素中的<code>&lt;h2&gt;</code>元素指定样式：<br><code>div h2{</code><br><code>color:black;</code><br><code>}</code><br>或者也可以指定某个<code>&lt;div&gt;</code>中的’<code>&lt;h2&gt;</code>’元素样式：<br><code>#cats h2{</code><br><code>bolor:black;</code><br><code>}</code><br>指定CSS属性时可以对相关的属性使用快捷的简写法，例如，<code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>和<code>padding-left</code>都与内边距有关，这就可以用一个快捷规则来指定，如：<br><code>padding:0px 20px 30px 10px;</code><br>0px就是上内边距（<code>padding-top</code>），20px就是右内边距（<code>padding-right</code>），30px就是底部内边距（<code>padding-bottom</code>），10px就是左内边距（<code>padding-left</code>），外边距<code>margin</code>同样可以使用这种快捷规则，如果所有四个边上的内边距或外边距值都相同，还可以更简短：<br><code>padding:20px;</code><br>边框<code>border</code>以及背景<code>background</code>也可以简写，字体<code>font</code>也没问题，不过<code>font</code>的排列形式需要注意，<code>font-style</code>和<code>font-weight</code>需要排列在<code>font-size</code>之前，如：<br><code>font:italic bold 20px 1.6em sans-serif；</code><br><code>&lt;div&gt;</code>允许为块级内容创建逻辑划分，<code>&lt;span&gt;</code>元素则采用类似的方式建立内联内容的逻辑分组；与<code>&lt;div&gt;</code>一样，也可以通过<code>class</code>属性为其增加到一个类，如：<br><code>&lt;p&gt;fruits:&lt;span class=”apple”&gt;apple&lt;/span&gt;&lt;/p&gt;</code><br>接着可以在CSS中为其指定样式：<br><code>.apple{</code><br> <code>color:red;</code><br><code>}</code><br>与其他元素不同，<code>&lt;a&gt;</code>元素的样式会根据它的状态改变。一个链接没有被点击过的状态为<code>link</code>，点击过的状态为<code>visited</code>，鼠标悬停在上面时为<code>hover</code>，浏览器将焦点放在链接上时状态为<code>focus</code>，用户第一次单击一个链接时状态为<code>active</code>；在CSS中只要在这些状态前加上“a:“就能为它们指定样式，如果只是想要针对某个链接指定样式，也可以通过<code>class</code>属性为其增加到一个类以及指定某个<code>&lt;div&gt;</code>元素中的链接，如：<br><code>a:link{</code><br><code>color:green;</code><br><code>}</code><br><code>a.red:visited{</code><br><code>color:red;</code><br><code>}</code><br><code>#cats a:link{</code><br><code>color:brown</code><br><code>}</code><br>而以上这些在CSS中表示链接状态的“link”、“visited”以及“hover”被称为“伪类”，这些状态都允许指定样式，就好像它们是类一样，但是从未在HTML中真正输入这些类。<br>接下来就解释一下“层叠样式表”中“层叠”的意思。首先是作者为页面写的所有样式表，不过有些浏览器还允许用户为HTML元素创建自己的样式，如果作者的样式表中没有定义这些样式，就会使用用户创建的样式表，如果读者在一个属性声明的最后加上“!important”，他就能覆盖作者的样式；最后，浏览器本身会维护一组默认样式，如果没有为一个元素定义样式，就会使用这些默认样式。如果根本没有任何作者或读者样式表，也会使用这些样式。浏览器确定要对一个元素应用哪个样式时，它会使用所有这些样式表。最优先的是作者的样式，然后是读者的样式，最后才是浏览器的默认样式。<br>在面对多份样式表时，浏览器会对所有匹配的规则排序，一般作者写的规则最为优先，接着按特定性对所有声明排序，如果一个规则能更准确地选择一个元素，那么这个规则就更为特定，例如，子选择器“blockquote h1“就比”h1“选择器更特定；对于冲突的规则，各个样式表中后出现的规则（更靠近最下面）更重要，所以如果在样式表中增加一个新规则，它会覆盖在它之前的所有规则。</p>\n","categories":[],"tags":[{"name":"HTML5","slug":"HTML5","count":3,"path":"api/tags/HTML5.json"}]}