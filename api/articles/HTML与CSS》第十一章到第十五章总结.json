{"title":"HTML与CSS》第十一章到第十五章总结","slug":"HTML与CSS》第十一章到第十五章总结","date":"2019-05-27T03:38:40.000Z","updated":"2019-05-27T03:41:22.112Z","comments":true,"path":"api/articles/HTML与CSS》第十一章到第十五章总结.json","photos":[],"link":"","excerpt":"《Head First  HTML与CSS》第十一章到第十五章总结","covers":null,"content":"<blockquote>\n<p>《Head First  HTML与CSS》第十一章到第十五章总结</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>第十一章到第十五章的标题：<br>  11、布局与定位——摆放元素<br>  12、HTML5标记——现代HTML<br>  13、表格与更多列表——建立表格<br>14、HTML表单——实现交互<br>15、附录：其他——十大主题<br>这是整本书最后五章的内容。</p>\n<p><strong>布局与定位——摆放元素</strong><br>  浏览器使用流在页面中放置元素，先从HTML文件最上面开始，从上到下沿着元素流逐个显示所遇到的各个元素；块元素从上向下流，各元素之间有一个换行，每个块元素会默认的占据浏览器窗口的整个宽度；内联元素在水平方向上会相互挨着，总体上会从左上方流向右下方，如果需要多行，浏览器会换行，在垂直方向上扩展外围块元素，来包含这些内联元素。正常页面流中两个块元素上下相邻的外边距会折叠为最大外边距的大小，或者如果两个外边距大小相同，则会折叠为一个外边距。对于图像，通常不仅会设置外边距，还会设置内边距和边框。只要两个垂直外边距碰到一起，它们就会折叠，即使是一个元素嵌套在另一个元素中也不例外。对于文本内容，浏览器也要让它流入页面；浏览器会先确定一行能流入多少文本，然后把这行文本当作一个内联元素，甚至会在它周围创建一个小盒子，如果调整页面的大小，文本会重新适应内容区，所有这些块也会随之改变。<br>认识“流”之后接着认识一个与之相关的属性——“<code>float</code>浮动元素”，“<code>float</code>”属性首先尽可能远地向左或向右（根据<code>float</code>的值）浮动一个元素。然后它下面的所有内容都会像流体一样绕流这个元素。 浮动元素必须有特定的宽度，不能设置auto，如：<br><code>#amazing{</code><br><code>width:200px;</code><br><code>float:right;</code><br><code>}</code><br>浮动元素放在块元素之上，不会影响正常的页面流，不过内联内容会考虑浮动元素的边界，围绕着这个浮动元素。<br>可以使用元素的CSS”<code>clear</code>”属性来提出请求：当元素流入页面时，在这个元素左边，右边或两边不允许有浮动内容，如：<br><code>#amazing{</code><br><code>width:200px;</code><br><code>float:right;</code><br><code>clear:right;</code><br><code>}</code><br>现在浏览器在页面上放置元素时，它会查看页脚右边有没有一个浮动元素，如果有，就会把页脚下移，直到它右边没有浮动元素为止。浮动元素无法直接浮动到中间，因为CSS只允许将一个元素向左或向右浮动，如果想要浮动到中间，那么这个浮动元素下面的内联内容就必须围绕这个元素的两边流动，这在浏览器中会很难做到；浮动元素的外边距也不会折叠，因为浮动元素只是浮在页面上，换句话说，浮动元素的外边距并不会碰到正常流中地元素的外边距，所以它们不会折叠。内联元素也可以浮动。<br>以上采用的所有设计都称为流体布局（liquid layouts），因为无论我们将浏览器调整到多大的宽度，布局都会扩展，填满整个浏览器。这些布局很有用，因为通过扩展，它们会填充可用空间，使用户能够充分利用他们的屏幕空间。不过，有时让布局锁定可能更重要，这样一来，当用户调整屏幕大小时，你的设计仍能保持原样。这称为冻结布局（frozen layouts）。冻结元素会锁定元素，让他们冻结在页面上，这样这些元素根本不能移动，就能够避免由于窗口扩展带来的很多问题。要将页面变成一个冻结页面，只需要对HTML做一点补充，先增加一个<code>&lt;div&gt;</code>元素并为它添加一个ID，这个<code>&lt;div&gt;</code>要包围页面中的所有内容，如：<br><code>&lt;body&gt;</code><br><code>&lt;div id=”allcontent”&gt;</code><br><code>hello</code><br><code>&lt;/div&gt;</code><br><code>&lt;/body&gt;</code><br>接着在CSS中限制这个div中所有元素的和内容的大小，使它们有一个固定的宽度，这样做的效果是将其中包含的所有内容限制在一定的范围内，同时可以为它增加一些内边距，并让它有自己的背景颜色，如：<br><code>#allcontent{</code><br><code>width:800px;</code><br><code>padding-top:5px;</code><br><code>padding-bottom:5px;</code><br><code>background-color:gray;</code><br><code>}</code><br>整个div外围的宽度总是800像素，即使浏览器大小调整了，这个宽度也不变，这样一来就能有效地将这个div以及其中包含的所有内容冻结在页面上。<br>除了流体与冻结布局，还有一种介于它们之间的凝胶（Jello）布局。凝胶布局会锁定页面中内容区的宽度，不过会将它在浏览器中居中，这只需要将div的左右外边距设置为“<code>auto</code>”：<br><code>#allcontent{</code><br><code>width:800px;</code><br><code>padding-top:5px;</code><br><code>padding-bottom:5px;</code><br><code>background-color:gray;</code><br><code>margin-left:auto;</code><br><code>margin-right:auto;</code><br><code>}</code><br>当内容区宽度为“auto”时，浏览器会根据需要扩展内容区。外边距为“auto”时，浏览器会确定正确的外边距是多少，另外还会确保左和右外边距相同，所以内容会居中。<br>利用CSS，实现一种布局通常有很多种方法，分别有自己的长处和短处。接下来学习的是另一种创建两栏布局的常用技术，它能让内容保持正确的顺序，同时避免流体布局存在的一些问题，这种方法同样要做一些折衷。利用这种新技术不必浮动元素，通过CSS的一个特性，可以在页面上精确地定位元素，这被称为绝对定位（， positioning）。<br>一个元素绝对定位时，浏览器首先要做的是将它从流中完全删除，然后，浏览器将这个元素放置在top和right属性指定的位置上（也可以使用bottom和left指定位置）。如：<br><code>#amazing{</code><br><code>position:absolute;</code><br><code>top:100px;</code><br><code>right:200px;</code><br><code>width:280px;</code><br><code>}</code><br>这里首先使用position属性指定这个元素要绝对定位，设置好top和right属性并指定一个宽度。<br>由于“amazing”现在是绝对定位的，它会从流中删除，并根据指定的top、left、bottom或right属性定位。由于“amazing”在流之外，其他元素甚至不知道有这样一个元素，它们会将它完全忽略。流中的元素也不会将其内联内容围绕在一个绝对定位元素周围。它们完全不知道页面上有这个绝对定位的元素。<br>HTML页面对于绝对定位元素的数量没有限制，也就是一个页面上能存在多个绝对定位元素，这就引出了绝对定位元素一个有意思的问题，绝对定位元素可以分层放置，一个元素可以放在另一个绝对定位元素上面，绝对定位元素也可以覆盖在另一个绝对定位元素上，而通过一个名为<code>z-index</code>的属性能指定它在一个虚拟z轴的位置（z-index的值越大，上面的元素“更靠近”你）。position定位属性的默认设置为“static（静态）”，实际上，position属性有4个值：static，absolute，fixed和relative，既然已经了解了static和absolute。Fixed固定定位是将元素放在相对于浏览器窗口的一个位置上（而不是相对于页面），所以固定元素永远也不会移动。相对（Relative）定位会让元素正常地流入页面，不过在页面上显示之前要进行偏移。相对定位常用于更高级的定位和特殊效果。绝对定位元素不用跟浮动元素一样指定宽度，不过如果没有指定宽度，默认的，块元素会占浏览器的整个宽度。指定位置时除了使用具体的像素值还可以使用百分数指定，如果使用百分数，改变浏览器宽度时，元素的位置可能会改变。百分数还常用于指定宽度。如果不需要为元素或外边距指定特定的宽度，就可以使用百分数，让主内容区和边栏的大小更为灵活。在两栏和三栏布局中会经常看到这种用法。<br>最后要介绍的布局是方式是CSS表格显示布局，CSS表格允许在一个有行和列的表格中显示块元素，另外，通过将内容放在一个CSS表格中，可以很容易地用HTML和CSS创建多栏设计。<br>可以把表格想成一个电子表格，包含行和列，各行和列交叉的位置有一个单元格。在一个电子表格中，可以在各个单元格中放入值，如一个数或一些文本，对于CSS表格显示，每个单元格会包含一个HTML块元素。<br>与HTML表格不同，CSS表格显示只是使用一种类似表格的布局来表现这个结构中的内容。HTML表格面向的是表格数据，也就是应当有表格结构的数据。所以，使用CSS表格显示只是创建某种表现布局的一种方法，而HTML表格则是建立数据的结构。<br>实现表格显示的做法很简单，只需要为整个表格创建一个<code>&lt;div&gt;</code>，然后为每一行分别创建一个<code>&lt;div&gt;</code>。对于每一列，只需要在行<code>&lt;div&gt;</code>中放置一个块元素。如：<br><code>&lt;div id=”tableContainer”&gt;</code><br><code>&lt;div id=”tableRow”&gt;</code><br><code>&lt;div id=”A”&gt;</code><br><code>…</code><br><code>&lt;/div&gt;</code><br><code>&lt;div id=”B”&gt;</code><br><code>…</code><br><code>&lt;/div&gt;</code><br><code>&lt;/div&gt;</code><br><code>&lt;/div&gt;</code><br>接下来是CSS：<br><code>#tableContainer{</code><br><code>display:table;</code><br><code>border-spacing:10px;</code><br><code>}</code><br><code>#tableRow{</code><br><code>display:table-row;</code><br><code>}</code><br><code>#A{</code><br><code>display:table-cell;</code><br><code>vertical-align:top;</code><br><code>}</code><br><code>#B{</code><br><code>display:table-cel;l</code><br><code>}</code><br>“tableContainer”是最外层div，表示整个表格结构，<code>display:table</code>属性告诉“tableContainer”div要像表格一样拜访，<code>border-spacing</code>属性作为表格中的单元格增加10像素的边框边距，可以把<code>border-spacing</code>看作是常规元素的外边距，因为要使用单元格上的<code>border-spacing</code>，所以不再需要div上的外边距。“tableRow”div表示表格中的一行。因为假设地表格中只有一行，所以只需要这一个规则。如果有多行，可以考虑使用一个类，这样就可以用一个规则指定所有行的样式。“A”和“B”div分别是表格中的列，所以它们分别作为表格单元格显示。增加一个“vertical-align”属性是确保表格两个单元格中的所有内容相对于单元格上边对齐（而不是与中间或下边对齐）。<br>可以这么说，有多少web设计人员，就有多少种页面设计，不过其中很多设计都是建立在这里学到的布局和定位（或者它们的一些变种）基础之上，要学会根据对页面的设计需求来指定页面的布局，还可以结合使用这些技术，例如，绝对定位的元素要相对于位置最近的父元素来定位，这样就完全可以将一个<code>&lt;div&gt;</code>放在另一个<code>&lt;div&gt;</code>中，对外围<code>&lt;div&gt;</code>使用相对定位（它仍在页面流中），然后用绝对定位指定内部<code>&lt;div&gt;</code>的位置，这样你就能相对于父<code>&lt;div&gt;</code>对它定位了。</p>\n<p><strong>HTML5标记——现代HTML</strong><br>   新的HTML5标记提供了更特定、更适合某些结构的标记，它们可能用于页眉、导航、页脚、文章等，可以利用这些新标记对页面稍稍做些调整，把原来的<code>&lt;div&gt;</code>换成一些更特定的元素，能够更明确地指示其中包含什么类型的内容，不再需要通过<code>&lt;div&gt;</code>定义；例如，用于定义页面顶部的<code>&lt;div id=header&gt;</code>可以直接用<code>&lt;header&gt;</code>元素替代。除此之外，<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;aside&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>都是帮助你建立页面结构的新元素，与使用<code>&lt;div&gt;</code>相比，它们可以提供更多含义。<br>   <code>&lt;section&gt;</code>元素用于对相关的内容分组，划分为区块，与<code>&lt;div&gt;</code>相似；<code>&lt;article&gt;</code>用于类似博客帖子、论坛帖子和新闻报道等独立的文章内容区，<code>&lt;aside&gt;</code>用于表示不作为页面主内容的次要内容，如插画和边栏。<code>&lt;time&gt;</code>元素用来标记时间和日期，<code>&lt;header&gt;</code>将标题、logo和署名等通常放在页面上。<code>&lt;footer&gt;</code>将诸如文档信息、法律措辞和版权说明等通常放在页面或区块最下方的内容组织在一起。<code>&lt;nav&gt;</code>用于组织网站导航链接。<br>   <code>&lt;time&gt;</code>元素有一个重要的属性：datetime,这个属性使用的值有些挑剔，如：<br>   <code>&lt;time datetime=”2019-4-19”&gt;4/19/2019&lt;/time&gt;</code><br>  如果元素内容没有采用官方internet日期/时间格式来写，就必须有datetime属性，datetime属性就是指定日期的官方internet格式，包含日、月和年，可以只指定年和月，或者只指定年，可以按24小时制增加一个时间，如：“2019-04-19 09:00”；可以只指定一个时间，如“05:00”；如果在日期和时间后面有一个“Z”，这表示UTC时间，如“2019-04-20 05:00Z”；如果使用datetime属性来指定一个日期和/或一个时间，可以写你希望的任何元素内容。通常，这可能是某个与日期或时间相关的文本，或者甚至可以是“yesterday”或“now”。<br>  <code>&lt;div&gt;</code>元素仍然可以用于建立结构。它通常将元素组织在一起来指定样式，或者有些内容可能不适合放在HTML5中那些与结构相关的新元素中，这些内容就可以使用更为通用的<code>&lt;div&gt;</code>来创建结构。<br>  在HTML5中有一个用于为页面增加视频的新元素<code>&lt;video&gt;</code>，与<code>&lt;img&gt;</code>元素类似，需要提供一个src属性来引用视频，视频将放在页面中<code>&lt;video&gt;</code>元素所在的位置，但与<code>&lt;img&gt;</code>不同的是，<code>&lt;video&gt;</code>元素要有结束标记，如：<br> <code>&lt;video controls autoplay width=”512” height=”288” src=”video/tweetsip.mp4”&gt;</code><br><code>&lt;/video&gt;</code><br> src属性与<code>&lt;img&gt;</code>元素的src很类似，这是一个URL，告诉video元素在哪里查找源文件。controls属性是一个布尔属性（所谓布尔属性就是没有值的属性），可以有，也可以没有，如果有这个属性，浏览器就会为视频显示增加内置的控件，不同浏览器提供的控件有所不同。autoplay布尔属性告诉浏览器：一旦有了足够的数据就自动开始播放视频，在设置这个属性之前一定要三思，通常，用户希望参与决定加载页面时是否播放视频。<br> width和height属性会设置视频显示区（也称为“视窗”）的宽度和高度。如果指定了一个海报（poster），海报图像会缩放到你指定的宽度和高度。视频也会缩放，不过会保持其宽高比（例如，4:3或16:9），所以，如果两边或者上下边有多余的空间，视频会采用上下加黑边（letter-boxed）或左右加黑边（pillar-boxed）的模式来适应显示区大小。如果想得到最佳的性能，就应该尽量采用视频原本的尺寸（这样浏览器就不用实时缩放视频了）。<br>除了以上5个属性之外还有另外3个比较重要的属性：<br>poster属性用于提供一个可选的海报图像；浏览器通常会把视频的一帧显示为“海报”图像来表示这个视频，如果删除了autoplay属性，单击播放之前就会看到这个图像。要由浏览器来选择显示哪一帧。通常，浏览器会显示视频的第一帧……这往往是一个黑屏。如果想显示某个特定的图像，就要由自己来创建现实的图像，并使用poster属性来指定，poster属性不需要src，直接输入图像的URL即可，如：<code>poster=”images/poster.png”</code>。<br> 属性preload通常用于细粒度地控制视频如何加载，来实现优化。大多数情况下，浏览器会根据是否设置autoplay以及用户的带宽来选择加载多少视频。可以覆盖这种设置，将preload设置为“none”（在用户真正“播放”视频之前不下载视频），也可以设置为“metadata”（下载视频元数据，但不下载视频内容），或者可以设置为“auto”，让浏览器来做决定。<br>Loop属性也是一个布尔属性，如果有loop属性，视频结束播放之后会自动重新开始播放视频。<br>  尽管浏览器制造商对于HTML5中的<code>&lt;video&gt;</code>元素和API已经达成一致，但是并不是所有人都认可视频文件本身的具体格式。<br>  一个视频格式文件包含两部分，一个视频部分和一个视音频部分，每个部分都使用一种特定的编码类型来编码（这样可以缩小数据大小，并能更高效地播放），也因此每个视频格式文件可以被称为视频容器文件。主流浏览器上主要使用3种不同的视频格式文件，它们分别是MP4、WebM以及Ogg。<br>MP4文件包含H.264视频编码和AAC音频编码，H.264由MPEG-LA公司授权。目前有多种H.264，每一种分别称为一个“profile”（等级或类）。MP4/H.264得到了Safari和IE9+的支持。有些版本的Chrome也提供了支持。<br>WebM文件包含Vp8视频编码和Vorbis音频编码，WebM由Google设计，用来处理VP8编码视频。WebM/VP8得到了Firefox、Chrome和Opera的支持。WebM格式的视频扩展名为.webm。<br>Ogg容器包含Theora视频编码和Vorbis音频编码，Theora是一个开源编解码器（编解码器（codec）是用来对一种特定视频或音频编码完成和解码的软件。）。采用Theora编码的视频通常包含在Ogg文件中，文件扩展名为.ogv。Ogg/Theora得到了Firefox、Chrome和Opera的支持。<br>要由浏览器决定可以对哪种格式的视频解码，不过并不是所有浏览器制造商都达成了一致，如果想支持所有视频，就需要多种编码。<br>可以通过在<code>&lt;video&gt;</code>元素中插入<code>&lt;source&gt;</code>元素来引入更多的候选视频，如：<br><code>&lt;video controls autoplay width=”512” height=”288”&gt;</code><br><code>&lt;source src=”video/tweetsip.mp4”&gt;</code><br><code>&lt;source src=”video/tweetsip.webm”&gt;</code><br><code>&lt;source src=”video/tweetsip.ogv”&gt;</code><br><code>&lt;p&gt;Sorry,your browser doesn’t support the video element&lt;/p&gt;</code><br><code>&lt;/video&gt;</code><br>如果video元素包含source元素是不需要src属性的，而是要添加到source之中，这里的src分别包含不同格式的视频版本。浏览器会从上向下查找，直到找到它能播放的一种格式，如果浏览器不支持视频，就会显示P元素中的文本。<br>还可以为浏览器提供更多帮助，给出有关视频文件的MIME类型和编解码器（可选）的更多信息来更具体地指定视频格式，如：<br><code>&lt;source src=”video/tweetsip.ogv” type=’video/ogg;codecs=”theora,vorbis”’&gt;</code><br>Src中使用的文件实际上是具体视频（和音频以及一些元数据）的容器。Type是一个可选属性，这是向浏览器提供的一个视频文件MIME类型的提示，指定容器的格式帮助它确定能不能播放这种类型的文件。Codecs参数指定使用哪个编解码器对视频和音频编码，来创建编码的视频文件，注意codecs参数的双引号。这说明type属性两边需要使用单引号。<br>假设浏览器不知道如何播放HTML5视频，还可以通过<code>&lt;object&gt;</code>元素插入Flash视频，如果浏览器不认识<code>&lt;video&gt;</code>元素，就会使用<code>&lt;object&gt;</code>，播放Flash视频。<br>以下是一些HTML5新增的元素，里面有上面学过的，也有一些还没学过的：<br><code>&lt;aside&gt;：这个元素用于表示放在内容旁边的内容，比如边栏或引用。</code><br><code>&lt;mark&gt;：这个元素用于突出某些文本，就像记号笔一样。</code><br><code>&lt;audio&gt;：可以用它在页面中包含声音内容，&lt;video&gt;属性中的部分重要属性同样适用于audio。</code><br><code>&lt;time&gt;：time元素是一个时间，一个日期或者一个日期时间（如1月21日凌晨2点）。</code><br><code>&lt;progress&gt;：用于显示进度。</code><br><code>&lt;footer&gt;：这个元素定义一个区块的底部或整个文档的页脚。</code><br><code>&lt;meter&gt;：显示某个范围的度量。</code><br><code>&lt;article&gt;：用来标记类似新闻报道或博客帖子等独立的内容。</code><br><code>&lt;canvas&gt;：这个元素用来在页面中显示用javascript绘制的图像和动画。</code><br><code>&lt;section&gt;：可以使用这个元素定义文档的主要区块。</code><br><code>&lt;header&gt;：有首部的区块和整个文档的页眉可以使用这个元素。</code><br><code>&lt;video&gt;：在页面中加入一个视频。</code><br><code>&lt;nav&gt;：使用这个元素把网站中用于导航的所有链接组织在一起。</code><br><code>&lt;figure&gt;：这个元素用来定义类似照片、图表甚至代码清单等独立的内容。</code><br><strong>表格与更多列表——建立表格</strong><br>   HTML有一个<code>&lt;table&gt;</code>元素专门负责标记表格数据，表格数据包含表头以及一些行和一些列，每个数据称为单元格，有时直接称为表格数据。<br>   <code>&lt;table&gt;</code>元素定义并包围整个表格，<code>&lt;th&gt;</code>元素定义行或列表头的数据单元格，每一行由<code>&lt;tr&gt;</code>元素定义，每行包含一个或多个数据单元格，分别用<code>&lt;td&gt;</code>元素定义。表格采用格状布局。每行对应HTML中的一个<code>&lt;tr&gt;……&lt;tr&gt;</code>行，每列对应行中的<code>&lt;td&gt;……&lt;/td&gt;</code>内容，如：<br><code>&lt;table&gt;</code><br><code>&lt;tr&gt;</code><br><code>&lt;th&gt;table&lt;/th&gt;</code><br><code>&lt;/tr&gt;</code><br><code>&lt;tr&gt;</code><br><code>&lt;td&gt;A&lt;/td&gt;</code><br><code>&lt;/tr&gt;</code><br><code>&lt;/table&gt;</code><br>在浏览器中，th元素中的表头内容都会默认粗体显示。要注意的是指定每一行的<code>&lt;td&gt;</code>元素时，隐含地就是在指定各列。如果一个数据单元格没有数据，就要将数据单元格的内容留空，也就是要写为<code>&lt;td&gt;&lt;/td&gt;</code>，如果省去了这个数据单元格，表格就不能正确地排列对齐，所以要列出所有数据单元格，即使它们的内容为空。假如希望表格表头放在表格的左侧而不是上方，那么只需要把表头元素放在各行中，而不是都放在第一行中。如果<code>&lt;th&gt;</code>元素是在各行中的第一项，那么第一列就会包含所有表格表头HTML表格允许使用HTML标记指定表格的结构，而CSS表格显示则提供了一种方法，可以用一种类似表格的表现方式显示块级元素。可以这样来考虑，确实需要在页面中创建表格数据时，就使用HTML表格，如果只需要对其他类型的内容使用一种类似表格的表现方式，就可以使用CSS表格显示布局。<br>可以用<code>&lt;caption&gt;</code>元素提供关于表格的额外信息，如：<br><code>&lt;table&gt;</code><br><code>&lt;caption&gt;table&lt;/caption&gt;</code><br><code>&lt;tr&gt;</code><br><code>&lt;th&gt;table&lt;/th&gt;</code><br><code>&lt;/tr&gt;</code><br><code>&lt;tr&gt;</code><br><code>&lt;td&gt;A&lt;/td&gt;</code><br><code>&lt;/tr&gt;</code><br><code>&lt;/table&gt;</code><br>默认地，大多数浏览器会把<code>&lt;caption&gt;</code>元素显示在表格上方，如果想更换默认位置，可以使用CSS重新指定它的位置。要记住，比较老的浏览器还不能完全支持位置的调整。<br>默认情况下表格是不会有边框等样式的，所以需要在CSS中指定，如：<br><code>table{</code><br><code>margin-left:20px;</code><br><code>margin-right:20px;</code><br><code>border:thin solid black;</code><br><code>caption-side:bottom;</code><br><code>}</code><br><code>td,th{</code><br><code>border:thin dotted gray;</code><br><code>padding:5px;</code><br><code>}</code><br><code>caption{</code><br><code>font-style:italic;</code><br><code>padding-top:8px;</code><br><code>}</code><br>就像能够控制元素内边距、边框和外边距一样，可以用CSS控制表格单元格的内边距、边框。与一般的元素不同的是，表格单元格一般没有外边距，而是用一个<code>border-spacing</code>属性定义边框间距（单元格之间的空间叫做边框间距），这是针对整个表格定义的，换句话说，不能单独地设置多个表格单元格的“外边距”，而是要为所有单元格设置一个共同的间距。<br>  可以使用<code>border-collapse</code>属性来折叠边框，使单元格之间根本没有边框间距。如：<br>  <code>table{</code><br><code>margin-left:20px;</code><br><code>margin-right:20px;</code><br><code>border:thin solid black;</code><br><code>caption-side:bottom;</code><br><code>border-collapse:collapse;</code><br><code>}</code><br><code>border-collapse</code>属性有3个值：separate、collapse和inherit，separate是默认值，也就是边框拥有间距，collapse就是将边框合并为一个单一的边框，没有边框间距，inherit规定应该从父元素继承<code>border-collapse</code>属性的值。可以用<code>text-align</code>和<code>vertical-align</code> CSS属性改变表单格中数据的对齐方式，同样也可以用<code>background-color</code>属性为表格增加颜色，可以为整个表格、各行或者单个的数据单元格增加背景颜色。<br>   要为表格隔行增加背景颜色的话可以通过<code>nth-child</code>伪类来实现。<br>   对于nth-child伪类，状态则是一个元素相对于它的兄弟元素的数字顺序，下面通过一个例子来看它的意思：<br>   <code>&lt;section&gt;</code><br>   <code>&lt;p&gt;…&lt;/p&gt;</code><br>   <code>&lt;p&gt;…&lt;/p&gt;</code><br>   <code>&lt;p&gt;…&lt;/p&gt;</code><br>   <code>&lt;p&gt;…&lt;/p&gt;</code><br>   <code>&lt;/section&gt;</code><br>   在这里，我们在一个<code>&lt;section&gt;</code>元素中嵌套了4个段落。每个段落分别是<code>&lt;section&gt;</code>的一个子元素。假设想要选择偶数段落有一个红色背景，而奇数段落有一个绿色背景，可以这么做：<br>   <code>p:nth-child(even){</code><br>   <code>background-color:red;</code><br>   <code>}</code><br><code>p:nth-child(odd){</code><br><code>background-color:green;</code><br><code>}</code><br>从“nth-child”这个名字可以猜到，这个伪类不只是能选择嵌套在一个元素中的奇数和偶数项，它还可以更灵活，可以使用数字n指定简单的表达式，从而在选择元素时有更多方式，要注意的是只有现代浏览器（IE9+！）才支持”nth-child”选择器。<br>如果数据单元格需要跨多行或多列，可以使用<code>&lt;td&gt;</code>元素的rowspan或colspan属性指定一个表格数据单元格占多少行或列，如：<br>    <code>&lt;tr&gt;</code><br>            <code>&lt;td rowspan=”2”&gt;Truth or Consequences,NM&lt;/td&gt;</code><br>            <code>&lt;td&gt;August 9th&lt;/td&gt;</code><br>            <code>&lt;td&gt;93&lt;/td&gt;</code><br>            <code>&lt;td rowspan=”2”&gt;4,242 ft&lt;/td&gt;</code><br>            <code>&lt;td rowspan=”2&gt;7,289&lt;/td&gt;</code><br>            <code>&lt;td&gt;5/5&lt;/td&gt;</code><br>    <code>&lt;/tr&gt;</code><br>    <code>&lt;tr&gt;</code><br>            <code>&lt;td&gt;August 27th&lt;/td&gt;</code><br>            <code>&lt;td&gt;98&lt;/td&gt;</code><br>            <code>&lt;td&gt;4/5&lt;/td&gt;</code><br>    <code>&lt;/tr&gt;</code><br>  这里是包含新墨西哥州旅行数据的两个表行；对于第二次旅行时没有改变的数据单元格（城市、海拔高度和人口），我们增加了一个rowspan属性，指示这些表格数据跨两行。在第二行中，只指定我们需要的列（日期、温度和新的用餐评分）。由于rowspan设置为2，所以不再需要城市，海拔高度和人口也一样。跨多列的设置与跨多行一样，只需要为<code>&lt;td&gt;</code>元素增加一个colspan属性，然后指定列数就可以了。与rowspan不同，跨多行时，需要删除同一行中的表格数据元素（因为所占的是多列，而不是多行。）同一个<code>&lt;td&gt;</code>中可以同时存在跨行与跨列，只需要调整表格中的其他<code>&lt;td&gt;</code>，考虑到同时有跨行和跨列，需要从同一行和同一列上删除相应数目的<code>&lt;td&gt;</code>。<br> 可以在表格中嵌套表格，只要将<code>&lt;table&gt;</code>元素及其所有内容放在一个数据单元格中即可。<br> 与其他所有元素一样，可以用CSS指定列表的样式。有几个特定于列表的CSS属性，如list-style-type和list-style-image。<br>  列表的主要属性是list-style-type，利用这个属性，可以控制列表中使用的项目符号（或者通常也叫做列表标记）。list-style-type属性一共有4个值，分别是：disc、circle、square和none。<br>  Disc是默认的列表标记类型，circle属性值提供一个简单的圆形标记，square属性值提供一个方块标记，值为none时，会删除所有列表标记。而<code>list-style-image</code>则允许为列表设置标记图像，与插入图片一样需要指定url，如：<br>  <code>li{</code><br>  <code>list-style-image:url(images/backpack.gif);</code><br>  <code>}</code><br>  有序列表的列表标记同样可以通过list-style-type属性指定，常用的包括decimal(十进制数)、upper-alpha（大写字母）、lower-alpha(小写字母)、upper-roman（大写罗马数字）和lower-roman（小写罗马数字）。<br>  除此之外还可以通过一个名为<code>list-style-position</code>的属性控制列表的文本回绕，将值设置为“inside”，文本就会在标记下回绕，设置为“outside”就会在文本下回绕。</p>\n<p><strong>HTML表单——实现交互</strong><br>   HTML表单实际上就是一个包含输入域的Web页面，允许输入信息，提交表单时，这些信息会打包并发送到一个Web服务器，由一个服务器脚本处理，然后创建一个全新的HTML页面作为响应，再将这个页面传回Web服务器。<br>对于浏览器来说，表单只是页面中的一些HTML。你会看到，只需要增加一些新元素，就能很容易地在页面中创建表单。<br> 浏览器加载HTML页面遇到表单元素时，它会在页面上创建控件，允许你输入各种各样的数据。控件就是类似按钮、文本输入框或下拉菜单之类的工具；取决于控件的不同类型可以有多种不同的输入方式，可以在文本控件中输入一行文本，或者可以在复选框控件中单击一个选项；接下来点击提交按钮控件提交这个表单，浏览器看到这个线索时，就会知道它需要打包所有数据，并把这些数据发送到服务器。一旦服务器得到表单数据，会把这些数据传递到适当的服务器脚本进行处理。<br>可以使用<code>&lt;form&gt;</code>元素创建表单，现在几乎所有块级元素都可以放在<code>&lt;form&gt;</code>元素里,<code>&lt;form&gt;</code>不仅包含构成表单的所有元素，还会告诉浏览器当提交表单时要把表单数据发送到哪里以及浏览器要用什么发送数据，如：<br><code>&lt;form action=“http://wickedlysmart.com/hfhtmlcss/contest.php” method=”POST”&gt;</code><br><code>&lt;/form&gt;</code><br>action属性包含Web服务器的URL，脚本所在的文件夹以及将处理表单数据的服务器脚本的文件名。Method属性确定表单数据如何发送到服务器。<br>几乎任何元素都可以放在表单中。<br><code>text&lt;input&gt;</code>元素用于输入一行文本，它还有一些可选的属性，允许为这个控件设置最大字符个数和宽度。如：<br><code>&lt;input type=”text” name=”fullname”&gt;</code><br>type属性为“text“时会在浏览器页面中创建一个单行控件，大多数表单元素都需要一个”name“名字，服务器将使用这个元素名；这个<code>&lt;input&gt;</code>元素是一个void元素，所以后面没有内容。<br>type属性为“submit“时会创建一个按钮，允许提交表单。点击这个按钮时，浏览器会把表单发送到服务器脚本进行处理。这个按钮的标签默认为“Submit”（提交），或者也可能是“Submit Query”（提交查询），通过“value”属性可以更改这个标签显示的文本。如：<br><code>&lt;input type=”submit” value=”order now”&gt;</code><br>type属性为“radio”时会创建一个单选钮，所有同名的单选钮构成一组互斥的按钮。如：<br><code>&lt;input type=”radio” name=”hotornot” value=”hot”&gt;</code><br><code>&lt;input type=”radio” name=”hotornot” value=”not”&gt;</code><br>每个选项使用一个<code>radio&lt;input&gt;</code>。与一组给定选项关联的单选钮必须有相同的名字，不过每个选项可以有不同的值。<br>type为”checkbox”时会创建一个复选框控件，可以选中也可以不选中，多个复选框可以放在一起，根据需要选中多个选项。如：<br><code>&lt;input type=”checkbox” name=”hotornot” value=”hot”&gt;</code><br><code>&lt;input type=”checkbox” name=”hotornot” value=”not”&gt;</code><br>类似于单选钮，对各个选项使用相同的<code>checkbox&lt;input&gt;</code>元素。相关的选项也公用一个名字，每个复选框有一个不同的值。<br>并不是所有表单元素都是<code>&lt;input&gt;</code>元素，还有很多其他的元素，比如用于输入多行文本的<code>&lt;textarea&gt;</code>和用于菜单的<code>&lt;select&gt;</code>。<br> <code>&lt;textarea&gt;</code>元素会创建一个多行的文本区，可以在其中输入多行文本。如果输入的文本在文本区中放不下，右边还会出现一个滚动条。如：<br><code>&lt;textarea name=”comments” rows=”10” cols=”48”&gt;&lt;/textarea&gt;</code><br><code>&lt;textarea&gt;</code>元素不是一个空元素，所以它有开始和结束标记。使用name属性为元素指定一个唯一的名字。Rows属性告诉浏览器文本区高度为多少个字符。Cols属性告诉浏览器文本区宽度为多少个字符。开始和结束标记之间的所有文本会成为浏览器文本区控件中的初始文本。还可以使用CSS指定文本区的宽度和高度。<br><code>&lt;select&gt;</code>元素会在Web页面中创建一个菜单空间。菜单提供了一种从一组选项中做出选择的方法。<code>&lt;select&gt;</code>元素与<code>&lt;option&gt;</code>元素结合使用可以创建一个菜单。如：<br><code>&lt;select name=”characters”&gt;</code><br><code>&lt;option value=”Buckaroo”&gt; Buckaroo Banzai&lt;/option&gt;</code><br><code>&lt;option value=”Tommy”&gt;Perfect Tommy&lt;/option&gt;</code><br><code>&lt;option value=”Penny”&gt;Penny Priddy&lt;/option&gt;</code><br><code>&lt;/select&gt;</code><br><code>&lt;select&gt;</code>元素包围所有菜单选项，把它们组合为一个菜单，就像其他表单元素一样，要用name属性为select元素指定一个唯一的名字。<code>&lt;option&gt;</code>元素的内容用作为菜单项的描述。每个菜单选项还可以包含一个表示这个菜单项的值。<br>说回<code>&lt;input&gt;</code>元素，当<code>&lt;input&gt;</code>元素的type为“number”时会限制只能输入数字，甚至可以用min和max属性来限制允许输入的最小数和最大数，有些浏览器会在输入域旁边显示箭头用来增减这个数。如：<br><code>&lt;input type=”number” min=”0” max=”20”&gt;</code><br>type为“range”时<code>&lt;input&gt;</code>类似于number，只是它会显示一个滑动条，而不是一个输入框，同样可以使用min和max属性来限制最小数和最大数，通过一个可选的step属性，可以用来指定值的间隔数（步长），number也同样适用。如：<br><code>&lt;input type=”range” min=”0” max=”20” step=”5”&gt;</code><br>type为“color”时可以指定一个颜色，单击这个控件时，会弹出一个颜色选择器，允许你选择一个颜色，而不必输入颜色名或值。如：<br><code>&lt;input type=”color”&gt;</code><br>如果浏览器不支持颜色输入元素，你会得到一个常规的文本输入控件。<br>type为“date”时，可以利用一个日期选择空间指定日期。这个控件会创建一个合法的日期格式串，发送到服务器脚本。如：<br><code>&lt;input type=”date”&gt;</code><br>与颜色输入元素类似，如果浏览器不支持日期输入元素，你会得到一个常规的文本输入控件。<br>type为“email”时也是一个文本输入元素，只不过在一些移动浏览器上，开始输入email时会得到一个方便输入email的定制键盘。如：<br><code>&lt;input type=”email”&gt;</code><br>相似的还有“tel”以及“url”，“tel”即telephone，“url”即链接地址，在桌面浏览器上看不出任何差别。不过，在移动浏览器上，它们会得到一个定制键盘，可以更容易地输入需要的字符，如/、@和数字。<br> 要注意的是以上的输入类型是HTML5中新增的，可以在所有Web页面中使用这些元素，但是有些浏览器上可能不会像这样显示。<br> 假如在表单中输入了姓名（name）、地址（address）、城市（city）、州（state）、邮编（zip）和电话号码（phone），然后单击提交按钮（Submit）。浏览器会得到部分数据，并用唯一的name属性值作为这些数据的标签。然后浏览器把这些名字和值发送到服务器，所以在HTML文件中输入表单元素时，最好为它们指定唯一的名字name属性。<br>如果输入只有一行的文本，就使用一个text<code>&lt;input&gt;</code>如姓名或编码。对于更长的多行文本，就要使用<code>&lt;textarea&gt;</code>。对于在text<code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>中能够输入多少文本，浏览器确实有一个限制，这个限制范围很大，通常不需要输入那么多内容，并不会超出这个限制；如果希望限制用户在text<code>&lt;input&gt;</code>中输入的文本，可以使用maxlength属性，把它设置为一个特定的字符数。例如，maxlength=“100”，这会限制用户最多能输入100个字符。不过，对于<code>&lt;textarea&gt;</code>，HTML中没有办法限制用户键入多少文本。<br>前面提过用“method”属性定义浏览器向服务器发送数据的方法，主要方法有两种：post和get。Post和get完成的任务是一样的，都是将表单数据从浏览器发送到服务器，不过采用了两种不同的方式。Post会打包表单变量，所有表单数据会作为请求的一部分发送，这对用户是不可见的，用户在浏览器地址栏里只能看到服务器脚本的URL。Get也会打包表单变量，但会把这些数据追加到URL的最后，然后向服务器发送请求。<br>如果希望用户能够对提交表单后的结果页面家属前，就必须使用GET，因为如果使用post，返回的结果页面就无法添加书签了；例如，假设有一个服务器脚本，它会返回一个搜索结果列表，如果希望用户能够对这些结果家属前，这样他们就能直接产看这些结果，而不用再填写表单。<br>另一方面，如果有一个处理订单的服务器脚本，可能不希望用户对这个页面加书签，否则，每次他们返回到这个书签时，都会重新提交这个订单。<br>还有一种情况就是表单中的数据是私有的，如信用卡或一个口令。因为URL是明文可以看到，别人只要查看你的浏览器历史，就能看到这些信息。或者如果将GET结果设置书签，别人也会很容易看到这些私有信息。<br>最后如果使用了一个<code>&lt;textarea&gt;</code>，就应该使用POST。因为可能会发送大量数据。GET和POST请求对于发送的数据量都有一个限制，不过对POST请求的限制通常要宽松得多。<br>可以用<code>&lt;label&gt;</code>元素以一种有助于提高可访问性的方式关联标签与表单元素，除了能更容易地使用CSS对标签设置样式，对于有视力障碍的人也有助于他们使用的屏幕阅读器更准确地标识表单元素。如：<br><code>&lt;input type=”radio” name=”hotornot” value=”hot” id=”hot”&gt;</code><br><code>&lt;label for=”hot”&gt;hot&lt;/label&gt;</code><br>要使用<code>&lt;label&gt;</code>元素，首先为表单元素增加一个id属性，然后增加一个<code>&lt;label&gt;</code>，设置其“for”属性为相应的id，这样这个单选钮旁边的文本就是一个真正的标签（label）。默认地，标签与普通的文本看上去并没有两样。不过，在可访问性方面，它们确实有很大不同，任何表单控件都可以使用<code>&lt;label&gt;</code>元素，同时，为单选钮或复选框控件增加标签时，尽管一组中所有控件的名字相同，但要记住每个控件的id必须是唯一的。<br>HTML还提供了一个<code>&lt;fieldset&gt;</code>元素，可以用来将公共元素组织在一起。如：<br><code>&lt;fieldset&gt;</code><br><code>&lt;legend&gt;Condiments&lt;/legend&gt;</code><br><code>&lt;input type=”checkbox” name=”spice” value=”salt”&gt;</code><br><code>Salt&lt;br&gt;</code><br><code>&lt;input type=”checkbox” name=”spice” value=”pepper”&gt;</code><br><code>Pepper&lt;br&gt;</code><br><code>&lt;input type=”chexkbox” name=”spice” value=”garlic”&gt;</code><br><code>Garlic</code><br><code>&lt;/fieldset&gt;</code><br><code>&lt;fieldset&gt;</code>元素包围一组输入（input）元素。<code>&lt;legend&gt;</code>为这一组提供一个标签，在不同的浏览器上，这些元素的显示也可能不同。<br>password<code>&lt;input&gt;</code>元素的工作与text<code>&lt;input&gt;</code>元素很类似，只是输入的文本会加掩码。如果表单中需要输入口令、密码或者其他敏感信息，这个元素就很有用。不过，表单数据并不会采用一种安全的方式从浏览器发送到服务器脚本（除非采取了安全措施），要提高安全性还是要联系托管公司。如：<br><code>&lt;input type=”password”&gt;</code><br>如果需要向服务器脚本发送整个文件，同样可以使用<code>&lt;input&gt;</code>元素，不过这一次要把type类型属性设置为“file”。这样一来，这个<code>&lt;input&gt;</code>元素会创建一个文件输入空间，允许选择一个文件，表单提交时，文件的内容会随其余的表单数据一同发送给服务器，另外，使用这个元素的前提是必须使用post方法。如：<br><code>&lt;input type=”file”&gt;</code><br>如果为<code>&lt;select&gt;</code>元素增加布尔属性multiple，就会把单选菜单变成一个多选菜单。不再显示一个下拉式菜单，在屏幕上会显示所有选项（如果选项太多，还会有一个滚动条）。如：<br><code>&lt;select name=”characters” multiple&gt;</code><br><code>&lt;option value=”Buckaroo”&gt;Buckaroo Banzai&lt;/option&gt;</code><br><code>&lt;option value=”Tommy”&gt;Perfect Tommy&lt;/option&gt;</code><br><code>&lt;/select&gt;</code><br>表单中大多数不同类型的<code>&lt;input&gt;</code>元素都可以使用placeholder属性，这会为填写表单的人提供一个提示，让他了解你希望这个控件中输入什么内容。例如，如果希望在一个文本域中得到名和姓，可以使用placeholder属性提供一个名和姓的示例。这个属性的值会显示在控件中，但是比增加到控件的正常内容要浅一些，一旦单击这个文本域，占位文本就会消失，所以它不会与你输入的内容混杂在一起。如：<br><code>&lt;input type=”text” placeholder=”Bcukaroo Banzai”&gt;</code><br>required属性可以用于任何表单控件，它指示一个域是必要的，所以，对于设置了这个属性的控件，如果没有为这些控件指定一个值，就无法正常提交表单。在支持这个属性的浏览器中，如果没有为有required属性的域指定一个值，提交表单时会得到一个错误消息，表单不会提交到服务器。<br>注意，这个属性也是一个布尔属性，这说明这个属性的值就是“有“或”没有“。也就是说，如果有这个属性，就说明设置了这个属性，如果没有，则未设置这个属性。如：<br><code>&lt;input type=”text” placeholder=”Buckaroo Banzai” required&gt;</code><br><strong>附录：其他——特殊的选择器</strong><br>  有一种类似伪类的伪元素（Pseudo-element），伪元素可以用来选择元素的某些部分，这些部分可能不便于包围在<code>&lt;div&gt;</code>或<code>&lt;span&gt;</code>中，也不方便用其他方法来选择。例如，:first-letter伪元素可以用来选择一个块元素中文本的第一个字母，这样就能创建诸如首字母大写和首字母下沉等效果。另外可以使用:first-line伪元素选择段落的第一行。如：<br><code>p:first-letter{</code><br><code>font-size:3em;</code><br>     <code>}</code><br><code>p:first-line{</code><br><code>font-style:italic;</code><br><code>}</code><br>伪元素的语法与伪类相同，这里将段落的第一个字母放大，另外把第一行设置为斜体。<br>也可以通过属性选择器来选择元素。如：<br><code>img[width] {border:black thin solid;}</code><br><code>img[height=”300”]{border: red thin solid;}</code><br><code>image[alt=”flowers”]{border:#ccc thin solid;}</code><br>第一个选择器会选择HTML中所有包含一个width属性的图像，第二个选择器会选择height属性值为300的所有图像。这个选择器会选择alt属性包含单词“flowers”的所有图像。<br>还可以根据兄弟元素来选择元素。例如，假设希望只选择前面有一个<code>&lt;h1&gt;</code>元素的段落，可以使用下面这个选择器：<br><code>h1+p{</code><br><code>font-style:italic;</code><br><code>}</code><br>先写前面的元素，再写一个“+”（加号），然后是兄弟元素。这个选择器会选择所有紧跟在一个<code>&lt;h1&gt;</code>元素后面的段落。<br>之前已经说过一些结合使用选择器的例子，例如，可以把一个类选择器用作为子孙选择器的一部分，如：<br><code>.blueberry p {color:pirple;}</code><br>这里会选择作为blueberry类元素的子孙的所有段落。<br>这里有一种模式，可以用来构造相当复杂的选择器，如：<br><code>div#greentea&gt;blockquote p:first-line{font-style:italic;}</code><br>这里先使用了一个子孙选择器，id为“greentea”的<code>&lt;div&gt;</code>必须是<code>&lt;blockquote&gt;</code>的一个父元素，接下来，增加<code>&lt;p&gt;</code>元素，这是在<code>&lt;blockquote&gt;</code>上下文中选择的元素。<code>&lt;p&gt;</code>元素必须是<code>&lt;blockquote&gt;</code>的一个子孙，<code>&lt;blockquote&gt;</code>则是id为“greentea”的一个<code>&lt;div&gt;</code>的子元素。最后增加一个伪元素first-line，指定只选择这个段落的第一行。这是一个相当复杂的选择器，完全可以使用这种方法构造自己的选择器。<br>浏览器制造商（换句话说，就是像Microsoft、Mozilla等开发厂商，还有WebKit的后台人员等）通常会为他们的浏览器增加新的功能来测试新特性，或者实现一直在考虑但还没有得到标准组织批准的CSS扩展。在这些情况下，开发商会创建类似这样的CSS属性：<br><code>-moz-transform</code><br>首先开发商用标识符<code>moz</code>表示Mozilla，用两个短横线将其隔开，而后就是属性“transform”。<br>可以利用这些开发商特定的属性，不过它们不一定能用在交付的产品中。这个属性可能永远不会作为一个合法标准得到批准，或者开发商可能会随时改变这个属性的实现。如果打算使用这些属性，通常会创建类似下面的CSS：<br><code>div{</code><br><code>transform:rotate(45deg);</code><br><code>-webkit-transform:rotate(45deg);</code><br><code>-moz-transform:rotate(45deg);</code><br><code>-ms-transform:rotate(45deg);</code><br><code>}</code><br>首先要列出通用属性，以保证属性得到支持，或者至少将来得到支持，然后列出已知的开发商特定的属性，webkit代表safari以及chrome，moz代表Mozilla，ms代表IE。<br>通常可以在各个浏览器的开发文档和发行说明中找到这些开发商特定的属性，或者可以加入与各浏览器开发过程相关的论坛，从中也可以了解到开发商特定的属性。<br>而通过上面的“transform”属性，可以对元素做充分的2D和3D变换，这需要用到伪类。如：<br><code>#box{</code><br><code>position:absolute;</code><br><code>top:100px;</code><br><code>left:100px;</code><br><code>width:200px;</code><br><code>height:200px;</code><br><code>background-color:red;</code><br><code>}</code><br><code>#box:hover{</code><br><code>transform:rotate(45deg);</code><br><code>-webkit-transform:rotate(45deg);</code><br><code>-moz-transform:rotate(45deg);</code><br><code>-o-transform:rotate(45deg);</code><br><code>-ms-transform:ratate(45deg);</code><br><code>}</code><br>指定好“box”<code>&lt;div&gt;</code>的定位、颜色、高宽这些基本样式后就可以通过伪类指定其处于悬停状态时的样式规则，最后需要浏览器特定的扩展，要注意微软的IE浏览器只有IE9（不包含IE9）以上版本才支持“transform”这个属性。<br>输入这些代码之后，鼠标经过“box”<code>&lt;div&gt;</code>时，应该能看到它会变换，旋转45度。当然，可以为“box”<code>&lt;div&gt;</code>规则增加transition属性，让它在2秒内通过一个漂亮的动画平滑地变换到它的新状态。如：<br><code>#box{</code><br><code>position:absolute;</code><br><code>top:100px;</code><br><code>left:100px;</code><br><code>width:200px;</code><br><code>height:200px;</code><br><code>background-color:red;</code><br><code>transition:transform 2s;</code><br><code>-webkit-transition: -webkit-transform 2s;</code><br><code>-moz-transition:-moz-transform 2s;</code><br><code>-o-transition:-o-transform 2s</code><br><code>}</code><br>这个transition属性指出：“如果transform属性的值改变，要在指定的时间内从当前transform值过渡到新的transform值。”transition属性的值也是一个属性，在这里，transition属性值为transform，另外还有一个持续时间（duration），即2秒。指定的属性值改变时，transition会使这个变化在指定的时间内完成，这就产生了一种动画效果。还可以对其他CSS属性完成过渡，如width或opacity。同样的，IE9以及之前的版本不支持过渡。<br>       HTML页面并不只能是被动的文档，它们完全可以有可执行的内容。可执行的内容会让页面有自己的行为。要创建可执行的内容，可以使用一种JavaScript脚本语言来编写程序或脚本。如：<br><code>&lt;script&gt;</code><br><code>window.onload=init;</code><br><code>function init() {</code><br><code>var submitButton=document.getElementById(“submitButton”);</code><br><code>submitButton.onclick=validBid</code><br><code>}</code><br><code>function validBid(){</code><br><code>if(document.getElementById(“bid”).value&gt;0){</code><br><code>document.getElementById(“”theForm).submit()</code><br><code>}else{</code><br><code>return false;</code><br><code>}</code><br><code>&lt;/script&gt;</code><br><code>&lt;script&gt;</code>元素允许你在HTML中放入代码，利用Javascript，可以使用表单的id来得到表单的一个句柄，以便对它进行处理，比如定义单击一个按钮时会发生什么。“if”开头的Javascript会检查用户的bid，确保它不会小于等于0。如果bid大于0，则提交这个表单。否则，由于这是一个错误，所以不提交表单。<br>然后在HTML中可以创建一个表单，在提交表单之前先使用这个脚本检查bid。如果bid大于0，则提交表单。如：<br><code>&lt;form id=”theForm” method=”post” action=”contest.php”&gt;</code><br><code>&lt;input type=”number” id=”bid” value=”0”&gt;&lt;br&gt;</code><br><code>&lt;input type=”button” id=”submitButton” value=”Bid!”&gt;&lt;br&gt;</code><br><code>&lt;/form&gt;</code><br>在Javascript中，可以定义单击submitButton时会发生什么，并用id“bid”得到输入的值。<br>表单输入验证是一个很常见也很有用的任务，通常用Javascript完成（除了这个例子所示，还可以很多其他类型的验证）。<br>除了HTML5增加的元素，HTML5还提供了一组新的应用编程接口（API）。这些API为Web页面开启了一个全新的世界，提供了丰富的接口和功能。<br> 对于web字体，有一些服务能提供帮助，可以方便Web字体的使用，如Google Web Fonts、Fonts.com和Extensis。<br>  浏览器下载你的字体时，会有不同的表现。有些浏览器会显示一个备份字体，另外一些可能会等待字体下载完毕后才显示文本。<br>  一旦下载了字体，会由浏览器缓存，下一次遇到使用这个字体的页面时不会再次获取。<br>  所有现代浏览器（IE9+）都支持Web开放字体格式（WOFF），这可能会成为Web字体标准。不过，Internet Explorer 8以前的版本与所有其他现代浏览器支持的字体标准有所不同（.eot），另外还有一个bug，不允许浏览器加载多个字体（所以你的@font-face规则中不能列多个字体）。如果需要在IE8及以前的版本上支持Web字体，前面提到的服务可以帮你，使你不用考虑这些跨浏览器兼容性问题，同时，现在有很多免费的字体。<br>  由于Web字体是真正的字体，可以像对传统字体一样对它们应用样式。<br>  使用Web字体可能会对页面性能产生一定影响，不过通常认为，与使用定制图形图像提供字体相比，这种方法会更好，往往能提供更好的性能。<br>  @font-face规则中的字体应当仅限于页面中真正使用的字体。<br>  如果有某个字体的许可证，要与开发商核对一下，它们可能在Web上也可以使用。<br>  与传统字体一样，一定要包含某个字体作为退路，以免你的页面的字体不可用，或者获取或者解码字体时遇到错误。<br>  很多Web页面都是由服务器上运行的应用生成的。例如，考虑一个在线订购系统，在一步一步完成订购过程时，服务器会生成一系列页面，也可以考虑一个在线论坛，会有一个服务器根据存储在某处的数据库中的论坛消息来生成页面。很多托管公司允许自己编些服务器端脚本和程序来创建服务器应用，下面是服务器端脚本允许做的一些事情：<br>    构建一个在线商店，包括商品、购物车和一个订购系统。<br>    根据用户的个人喜好，建立针对用户的个性化页面。<br>    发布最新的新闻、事件和信息。<br>    允许用户搜索你的网站。<br>    允许用户帮助构建你的网站内容。<br>要创建服务器应用，需要知道一种服务器端脚本或编程语言，有很多相互竞争的Web开发语言，这些语言一直在不断发展：PHP、Python、Perl、Node.js、Ruby on Rails和JavaServerPages(JSP)都很常用。<br> 与视频相似，HTML利用<code>&lt;audio&gt;</code>元素可以在页面中插入音频而无需使用插件。如：<br><code>&lt;audio src=”song.mp3” id=”boombox” controls&gt;</code><br><code>Sorry but audio is not supported in your browser</code><br><code>&lt;/audio&gt;</code><br>同样类似于视频，每个浏览器实现的音频播放器控件都有各自不同的外观（这些控件通常包括一个进度条，以及播放，暂停和音量控制控件）。<br>不过与视频同样遗憾的是，音频也没有标准编码，目前有3种格式很流行：MP3、WAV和Ogg Vorbis，不同浏览器上对这些格式的支持会有所不同。<br>除了简单得播放功能外，<code>&lt;audio&gt;</code>元素及其JavaScript API还提供了很多其他控制。通过结合JavaScript使用这个元素，可以隐藏音频控件，通过代码管理音频的播放，创建有趣的Web体验。利用HTML5，现在完全可以做到这一点，而不再需要使用（和学习）插件（如Adobe Flash），并因此引入开销。</p>\n","categories":[],"tags":[{"name":"HTML5","slug":"HTML5","count":5,"path":"api/tags/HTML5.json"}]}